// Generated by Dagger (https://google.github.io/dagger).
package com.close.svea.refactoringsample.DI;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class NetworkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final NetworkModule module;

  private final Provider<OkHttpClient> httpClientProvider;

  public NetworkModule_ProvideRetrofitFactory(
      NetworkModule module, Provider<OkHttpClient> httpClientProvider) {
    this.module = module;
    this.httpClientProvider = httpClientProvider;
  }

  @Override
  public Retrofit get() {
    return provideInstance(module, httpClientProvider);
  }

  public static Retrofit provideInstance(
      NetworkModule module, Provider<OkHttpClient> httpClientProvider) {
    return proxyProvideRetrofit(module, httpClientProvider.get());
  }

  public static NetworkModule_ProvideRetrofitFactory create(
      NetworkModule module, Provider<OkHttpClient> httpClientProvider) {
    return new NetworkModule_ProvideRetrofitFactory(module, httpClientProvider);
  }

  public static Retrofit proxyProvideRetrofit(NetworkModule instance, OkHttpClient httpClient) {
    return Preconditions.checkNotNull(
        instance.provideRetrofit(httpClient),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}

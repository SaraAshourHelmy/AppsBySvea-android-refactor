// Generated by Dagger (https://google.github.io/dagger).
package com.close.svea.refactoringsample.DI;

import android.content.Context;
import com.close.svea.refactoringsample.data.repository.PlaceRepositoryImpl;
import com.close.svea.refactoringsample.ui.item.ShowPlacesViewModelFactory;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ShowPlacesViewModelModule_ProvidePlaceFactoryFactory
    implements Factory<ShowPlacesViewModelFactory> {
  private final ShowPlacesViewModelModule module;

  private final Provider<Context> contextProvider;

  private final Provider<PlaceRepositoryImpl> placeRepositoryProvider;

  public ShowPlacesViewModelModule_ProvidePlaceFactoryFactory(
      ShowPlacesViewModelModule module,
      Provider<Context> contextProvider,
      Provider<PlaceRepositoryImpl> placeRepositoryProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.placeRepositoryProvider = placeRepositoryProvider;
  }

  @Override
  public ShowPlacesViewModelFactory get() {
    return provideInstance(module, contextProvider, placeRepositoryProvider);
  }

  public static ShowPlacesViewModelFactory provideInstance(
      ShowPlacesViewModelModule module,
      Provider<Context> contextProvider,
      Provider<PlaceRepositoryImpl> placeRepositoryProvider) {
    return proxyProvidePlaceFactory(module, contextProvider.get(), placeRepositoryProvider.get());
  }

  public static ShowPlacesViewModelModule_ProvidePlaceFactoryFactory create(
      ShowPlacesViewModelModule module,
      Provider<Context> contextProvider,
      Provider<PlaceRepositoryImpl> placeRepositoryProvider) {
    return new ShowPlacesViewModelModule_ProvidePlaceFactoryFactory(
        module, contextProvider, placeRepositoryProvider);
  }

  public static ShowPlacesViewModelFactory proxyProvidePlaceFactory(
      ShowPlacesViewModelModule instance, Context context, PlaceRepositoryImpl placeRepository) {
    return Preconditions.checkNotNull(
        instance.providePlaceFactory(context, placeRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}

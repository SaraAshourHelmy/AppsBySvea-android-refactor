// Generated by Dagger (https://google.github.io/dagger).
package com.close.svea.refactoringsample.DI;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;

public final class NetworkModule_ProvideCacheFactory implements Factory<Cache> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  public NetworkModule_ProvideCacheFactory(
      NetworkModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public Cache get() {
    return provideInstance(module, contextProvider);
  }

  public static Cache provideInstance(NetworkModule module, Provider<Context> contextProvider) {
    return proxyProvideCache(module, contextProvider.get());
  }

  public static NetworkModule_ProvideCacheFactory create(
      NetworkModule module, Provider<Context> contextProvider) {
    return new NetworkModule_ProvideCacheFactory(module, contextProvider);
  }

  public static Cache proxyProvideCache(NetworkModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideCache(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}

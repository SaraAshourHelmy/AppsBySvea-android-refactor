// Generated by Dagger (https://google.github.io/dagger).
package com.ltmtlu.volvocartask.DI;

import com.close.svea.refactoringsample.data.network.PlacesApiService;
import com.close.svea.refactoringsample.data.repository.PlaceRepositoryImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PlaceRepoModule_ProvidePlaceRepoFactory implements Factory<PlaceRepositoryImpl> {
  private final PlaceRepoModule module;

  private final Provider<PlacesApiService> placesApiServiceProvider;

  public PlaceRepoModule_ProvidePlaceRepoFactory(
      PlaceRepoModule module, Provider<PlacesApiService> placesApiServiceProvider) {
    this.module = module;
    this.placesApiServiceProvider = placesApiServiceProvider;
  }

  @Override
  public PlaceRepositoryImpl get() {
    return provideInstance(module, placesApiServiceProvider);
  }

  public static PlaceRepositoryImpl provideInstance(
      PlaceRepoModule module, Provider<PlacesApiService> placesApiServiceProvider) {
    return proxyProvidePlaceRepo(module, placesApiServiceProvider.get());
  }

  public static PlaceRepoModule_ProvidePlaceRepoFactory create(
      PlaceRepoModule module, Provider<PlacesApiService> placesApiServiceProvider) {
    return new PlaceRepoModule_ProvidePlaceRepoFactory(module, placesApiServiceProvider);
  }

  public static PlaceRepositoryImpl proxyProvidePlaceRepo(
      PlaceRepoModule instance, PlacesApiService placesApiService) {
    return Preconditions.checkNotNull(
        instance.providePlaceRepo(placesApiService),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
